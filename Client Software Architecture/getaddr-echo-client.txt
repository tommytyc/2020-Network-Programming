       #include <sys/types.h>
       #include <sys/socket.h>
       #include <netdb.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>
       #include <string.h>
       #include <arpa/inet.h>
       #include <netinet/in.h>

       #define BUF_SIZE 500

       int
       main(int argc, char *argv[])
       {
           struct addrinfo hints;
           struct addrinfo *result, *rp;
           struct sockaddr_in server_addr;
           int sfd, s, j, server_addrlen;
           size_t len;
           ssize_t nread;
           char buf[BUF_SIZE];

           if (argc < 2) {
               fprintf(stderr, "Usage: %s host port \n", argv[0]);
               exit(EXIT_FAILURE);
           }

           /* Obtain address(es) matching host/port */

           memset(&hints, 0, sizeof(struct addrinfo));
           hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
           hints.ai_socktype = SOCK_DGRAM; /* Datagram socket */
           hints.ai_flags = 0;
           hints.ai_protocol = 0;          /* Any protocol */

           s = getaddrinfo(argv[1], argv[2], &hints, &result);
           if (s != 0) {
               fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
               exit(EXIT_FAILURE);
           }

           /* getaddrinfo() returns a list of address structures.
              Try each address until we successfully connect(2).
              If socket(2) (or connect(2)) fails, we (close the socket
              and) try the next address. */

           for (rp = result; rp != NULL; rp = rp->ai_next) {
               sfd = socket(rp->ai_family, rp->ai_socktype,
                            rp->ai_protocol);
               if (sfd == -1)
                   continue;
                else
                   break;                  /* Success */

               close(sfd);
           }

           if (rp == NULL) {               /* No address succeeded */
               fprintf(stderr, "Could not connect\n");
               exit(EXIT_FAILURE);
           }

          freeaddrinfo(result);           /* No longer needed */

          while (fgets(buf, sizeof(buf), stdin)) {
               len = strlen(buf);
               if (len==1) exit(0);

               if (sendto(sfd, buf, len, 0, rp->ai_addr, rp->ai_addrlen)!= len) {
                   fprintf(stderr, "partial/failed write\n");
                   exit(EXIT_FAILURE);
               }

               nread = recvfrom(sfd, buf, BUF_SIZE, 0, (struct sockaddr *)&server_addr, &server_addrlen);
               if (nread == -1) {
                   perror("read");
                   exit(EXIT_FAILURE);
               }

               printf("Received from %s:%d, %d bytes\nEcho:%s\n", inet_ntoa((struct in_addr) server_addr.sin_addr), (int) ntohs(server_addr.sin_port), (int) nread, buf);
           }

           exit(EXIT_SUCCESS);
       }
