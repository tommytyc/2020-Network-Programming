#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <netdb.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>

#ifndef INADDR_NONE
#define INADDR_NONE     0xffffffff
#endif  /* INADDR_NONE */
int     errno = 0;

int     errexit(const char *format, ...)
{
        va_list args;

        va_start(args, format);
        vfprintf(stderr, format, args);
        va_end(args);
        exit(1);
}

int     connectsock(const char *host, const char *service, const char *transport ){

   struct hostent       *phe; /* pointer to host information entry      */
   struct servent       *pse; /* pointer to service information entry */
   struct protoent      *ppe; /* pointer to protocol information entry*/
   struct sockaddr_in   sin;    /* an Internet endpoint address         */
   int  s, type;        /* socket descriptor and socket type    */


   memset(&sin, 0, sizeof(sin));
   sin.sin_family = AF_INET;

   if ( pse = getservbyname(service, transport) )
        sin.sin_port = pse->s_port;
   else if ((sin.sin_port=htons((unsigned short)atoi(service))) == 0)
                        errexit("can't get \"%s\" service entry\n", service);

   if ( phe = gethostbyname(host) )
        memcpy(&sin.sin_addr, phe->h_addr, phe->h_length);
   else if ( (sin.sin_addr.s_addr = inet_addr(host)) == INADDR_NONE )
                        errexit("can't get \"%s\" host entry\n", host);

   if ( (ppe = getprotobyname(transport)) == 0)
        errexit("can't get \"%s\" protocol entry\n", transport);

   if (strcmp(transport, "udp") == 0)
        type = SOCK_DGRAM;
   else
        type = SOCK_STREAM;

   s = socket(PF_INET, type, ppe->p_proto);
   if (s < 0)
         errexit("can't create socket: %s\n", strerror(errno));

   if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0)
        errexit("can't connect to %s.%s: %s\n", host, service, strerror(errno));
   return s;
}

int      connectUDP(const char *host, const char *service )
 /* Arguments:
 *      host    - name of host to which connection is desired
 *      service - service associated with the desired port
 */

{
        return connectsock(host, service, "udp");
}

#define LINELEN         128

/*------------------------------------------------------------------------
 * UDPecho - send input to ECHO service on specified host and print reply
 *------------------------------------------------------------------------
 */
int     UDPecho(const char *host, const char *service)
{
        char    buf[LINELEN+1];         /* buffer for one line of text  */
        int     s, nchars;              /* socket descriptor, read count*/

        s = connectUDP(host, service);
        while (fgets(buf, sizeof(buf), stdin)) {
                buf[LINELEN] = '\0';    /* insure null-terminated */
                nchars = strlen(buf);
                if (nchars == 1) break; /* termination trigger */
                if (write(s, buf, nchars) < 0)
                        errexit("socket write failed: %s\n", strerror(s));
                if (read(s, buf, nchars) < 0)
                        errexit("socket read failed: %s\n",
                                        strerror(s));
                fputs(buf, stdout);
        }
}

/*------------------------------------------------------------------------
 * main - UDP client for ECHO service
 *------------------------------------------------------------------------
 */
int     main(int argc, char *argv[])
{
        char    *host;
        char    *service;

		if (argc !=3) {
                fprintf(stderr, "usage: %s host port\n", argv[0]);
                exit(1);
        }
		service = argv[2];
        host = argv[1];
        UDPecho(host, service);
}
